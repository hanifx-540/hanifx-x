import base64;exec(base64.b64decode('aW1wb3J0IHJlcXVlc3RzCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZSwgcGFyc2VfcXMsIHVybGpvaW4KaW1wb3J0IHJlCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IsIHdhaXQKaW1wb3J0IHN5cwppbXBvcnQgdGltZQoKIyBUZXJtaW5hbCBjb2xvciBjb2RlcwpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0NZQU4gPSAnXDAzM1s5Nm0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBFTkRDID0gJ1wwMzNbMG0nCiAgICBCT0xEID0gJ1wwMzNbMW0nCgpwYXJhbV9rZXl3b3JkcyA9IFsiaWQiLCAiY2F0IiwgInBhZ2UiLCAicGlkIiwgInVpZCIsICJpdGVtIiwgInBvc3QiLCAicHJvZCIsICJhcnRpY2xlIl0KCnZpc2l0ZWQgPSBzZXQoKQpmb3VuZF9wYXJhbXMgPSBbXQoKZGVmIHNsb3dfcHJpbnQodGV4dCwgZGVsYXk9MC4wMyk6CiAgICBmb3IgY2hhciBpbiB0ZXh0OgogICAgICAgIHByaW50KGNoYXIsIGVuZD0nJywgZmx1c2g9VHJ1ZSkKICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQogICAgcHJpbnQoKQoKZGVmIGV4dHJhY3RfbnVtZXJpY19wYXJhbXNfZnJvbV91cmwodXJsKToKICAgIHBhcnNlZCA9IHVybHBhcnNlKHVybCkKICAgIHBhcmFtcyA9IHBhcnNlX3FzKHBhcnNlZC5xdWVyeSkKICAgIHJlc3VsdHMgPSBbXQogICAgZm9yIGtleSwgdmFsdWVzIGluIHBhcmFtcy5pdGVtcygpOgogICAgICAgIGZvciB2IGluIHZhbHVlczoKICAgICAgICAgICAgaWYgdi5pc2RpZ2l0KCk6CiAgICAgICAgICAgICAgICByZXN1bHRzLmFwcGVuZCgoa2V5LCB2KSkKICAgIHJldHVybiByZXN1bHRzCgpkZWYgZXh0cmFjdF9mcm9tX2h0bWwodXJsLCB0ZXh0KToKICAgIHBhcmFtc19mb3VuZCA9IFtdCgogICAgc291cCA9IEJlYXV0aWZ1bFNvdXAodGV4dCwgImh0bWwucGFyc2VyIikKCiAgICAjIEhpZGRlbiBpbnB1dHMgaW4gZm9ybXMKICAgIGZvciBmb3JtIGluIHNvdXAuZmluZF9hbGwoImZvcm0iKToKICAgICAgICBmb3IgaW5wIGluIGZvcm0uZmluZF9hbGwoImlucHV0Iik6CiAgICAgICAgICAgIG5hbWUgPSBpbnAuZ2V0KCJuYW1lIikKICAgICAgICAgICAgdmFsdWUgPSBpbnAuZ2V0KCJ2YWx1ZSIsICIiKQogICAgICAgICAgICBpZiBuYW1lIGFuZCB2YWx1ZS5pc2RpZ2l0KCk6CiAgICAgICAgICAgICAgICBwYXJhbXNfZm91bmQuYXBwZW5kKCh1cmwsIG5hbWUsIHZhbHVlKSkKCiAgICAjIExpbmtzIGluIHBhZ2UKICAgIGxpbmtzID0gW10KICAgIGZvciBhIGluIHNvdXAuZmluZF9hbGwoImEiLCBocmVmPVRydWUpOgogICAgICAgIGxpbmsgPSB1cmxqb2luKHVybCwgYVsiaHJlZiJdKQogICAgICAgIGxpbmtzLmFwcGVuZChsaW5rKQoKICAgICMgUmVnZXggc2VhcmNoIGluIHJhdyBodG1sIGZvciBwYXJhbT1udW1iZXIKICAgIG1hdGNoZXMgPSByZS5maW5kYWxsKHInKFxiKD86JyArICd8Jy5qb2luKHBhcmFtX2tleXdvcmRzKSArIHInKVxiKT0oWzAtOV0rKScsIHRleHQsIHJlLklHTk9SRUNBU0UpCiAgICBmb3Iga2V5LCB2YWwgaW4gbWF0Y2hlczoKICAgICAgICBwYXJhbXNfZm91bmQuYXBwZW5kKCh1cmwsIGtleSwgdmFsKSkKCiAgICAjIEV4dHJhY3QgbnVtZXJpYyBwYXJhbXMgZnJvbSBjdXJyZW50IFVSTAogICAgcGFyYW1zX2ZvdW5kLmV4dGVuZChbKHVybCwgaywgdikgZm9yIGssIHYgaW4gZXh0cmFjdF9udW1lcmljX3BhcmFtc19mcm9tX3VybCh1cmwpXSkKCiAgICByZXR1cm4gcGFyYW1zX2ZvdW5kLCBsaW5rcwoKZGVmIGZldGNoX2FuZF9wYXJzZSh1cmwpOgogICAgdHJ5OgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgdGltZW91dD0xMCkKICAgICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgICByZXR1cm4gZXh0cmFjdF9mcm9tX2h0bWwodXJsLCByZXNwb25zZS50ZXh0KQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiAoW10sIFtdKQoKZGVmIGNyYXdsKHN0YXJ0X3VybCwgbWF4X2RlcHRoPTIpOgogICAgc3RhY2sgPSBbKHN0YXJ0X3VybCwgMCldCiAgICBhbGxfZm91bmRfcGFyYW1zID0gW10KICAgIHZpc2l0ZWRfbG9jYWwgPSBzZXQoKQogICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MTApIGFzIGV4ZWN1dG9yOgogICAgICAgIGZ1dHVyZXMgPSB7fQogICAgICAgIHdoaWxlIHN0YWNrIG9yIGZ1dHVyZXM6CiAgICAgICAgICAgIHdoaWxlIHN0YWNrIGFuZCBsZW4oZnV0dXJlcykgPCAxMDoKICAgICAgICAgICAgICAgIGN1cnJlbnRfdXJsLCBkZXB0aCA9IHN0YWNrLnBvcCgpCiAgICAgICAgICAgICAgICBpZiBkZXB0aCA+IG1heF9kZXB0aCBvciBjdXJyZW50X3VybCBpbiB2aXNpdGVkX2xvY2FsOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB2aXNpdGVkX2xvY2FsLmFkZChjdXJyZW50X3VybCkKICAgICAgICAgICAgICAgIHNsb3dfcHJpbnQoZiJ7Q29sb3JzLk9LQ1lBTn1bKl0gQ3Jhd2xpbmc6IHtjdXJyZW50X3VybH17Q29sb3JzLkVOREN9IiwgZGVsYXk9MC4wMDEpCiAgICAgICAgICAgICAgICBmdXR1cmUgPSBleGVjdXRvci5zdWJtaXQoZmV0Y2hfYW5kX3BhcnNlLCBjdXJyZW50X3VybCkKICAgICAgICAgICAgICAgIGZ1dHVyZXNbZnV0dXJlXSA9IChjdXJyZW50X3VybCwgZGVwdGgpCgogICAgICAgICAgICBkb25lLCBfID0gd2FpdChmdXR1cmVzLmtleXMoKSwgcmV0dXJuX3doZW49J0ZJUlNUX0NPTVBMRVRFRCcpCiAgICAgICAgICAgIGZvciBmIGluIGRvbmU6CiAgICAgICAgICAgICAgICB1LCBkID0gZnV0dXJlc1tmXQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHBhcmFtc19mb3VuZCwgbGlua3MgPSBmLnJlc3VsdCgpCiAgICAgICAgICAgICAgICAgICAgYWxsX2ZvdW5kX3BhcmFtcy5leHRlbmQocGFyYW1zX2ZvdW5kKQogICAgICAgICAgICAgICAgICAgIGZvciBsaW5rIGluIGxpbmtzOgogICAgICAgICAgICAgICAgICAgICAgICBpZiB1cmxwYXJzZShsaW5rKS5uZXRsb2MgPT0gdXJscGFyc2UodSkubmV0bG9jIGFuZCBsaW5rIG5vdCBpbiB2aXNpdGVkX2xvY2FsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suYXBwZW5kKChsaW5rLCBkICsgMSkpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIGRlbCBmdXR1cmVzW2ZdCgogICAgcmV0dXJuIGFsbF9mb3VuZF9wYXJhbXMKCmRlZiBtYWluKCk6CiAgICBzbG93X3ByaW50KGYie0NvbG9ycy5IRUFERVJ9e0NvbG9ycy5CT0xEfT09PSBOdW1lcmljIFBhcmFtZXRlciBDcmF3bGVyID09PXtDb2xvcnMuRU5EQ30iLCBkZWxheT0wLjA1KQogICAgc3RhcnRfdXJsID0gaW5wdXQoZiJ7Q29sb3JzLk9LQkxVRX1FbnRlciB3ZWJzaXRlIFVSTDoge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgIGlmIG5vdCBzdGFydF91cmwuc3RhcnRzd2l0aCgoImh0dHA6Ly8iLCAiaHR0cHM6Ly8iKSk6CiAgICAgICAgc3RhcnRfdXJsID0gImh0dHA6Ly8iICsgc3RhcnRfdXJsCgogICAgc2xvd19wcmludChmIntDb2xvcnMuV0FSTklOR31TdGFydGluZyBjcmF3bCBvbjoge3N0YXJ0X3VybH17Q29sb3JzLkVOREN9IiwgZGVsYXk9MC4wNSkKCiAgICBwYXJhbXMgPSBjcmF3bChzdGFydF91cmwsIG1heF9kZXB0aD0yKQoKICAgIGlmIHBhcmFtczoKICAgICAgICB1bmlxdWUgPSB7fQogICAgICAgIGZvciB1LCBrLCB2IGluIHBhcmFtczoKICAgICAgICAgICAgdW5pcXVlWyh1LCBrLCB2KV0gPSBUcnVlCgogICAgICAgIHNsb3dfcHJpbnQoZiJcbntDb2xvcnMuT0tHUkVFTn3inIUgRm91bmQgTnVtZXJpYyBQYXJhbWV0ZXJzOntDb2xvcnMuRU5EQ30iLCBkZWxheT0wLjA1KQogICAgICAgIHdpdGggb3BlbigiZm91bmRfcGFyYW1ldGVyc19hZHZhbmNlZC50eHQiLCAidyIpIGFzIGY6CiAgICAgICAgICAgIGZvciB1LCBrLCB2IGluIHVuaXF1ZToKICAgICAgICAgICAgICAgIGxpbmUgPSBmIlt7a309e3Z9XSBmb3VuZCBhdCB7dX0iCiAgICAgICAgICAgICAgICBzbG93X3ByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtsaW5lfXtDb2xvcnMuRU5EQ30iLCBkZWxheT0wLjAxKQogICAgICAgICAgICAgICAgZi53cml0ZShsaW5lICsgIlxuIikKICAgICAgICBzbG93X3ByaW50KGYiXG57Q29sb3JzLk9LQ1lBTn3wn5OCIFNhdmVkIGluIGZvdW5kX3BhcmFtZXRlcnNfYWR2YW5jZWQudHh0e0NvbG9ycy5FTkRDfSIsIGRlbGF5PTAuMDUpCiAgICBlbHNlOgogICAgICAgIHNsb3dfcHJpbnQoZiJcbntDb2xvcnMuRkFJTH3inYwgTm8gbnVtZXJpYyBwYXJhbWV0ZXJzIGZvdW5kLntDb2xvcnMuRU5EQ30iLCBkZWxheT0wLjA1KQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo='))